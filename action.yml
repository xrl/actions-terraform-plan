name: 'Terraform PR'
description: 'GitHub Action for adding `terraform plan` output as a PR comment'
branding:
  icon: 'package'
  color: 'blue'
runs:
  using: "composite"
  steps:
    - name: Terraform Plan
      id: plan
      shell: bash
      run: |
        terraform plan -no-color 2>&1 | tee ${GITHUB_WORKSPACE}/plan.out

    - name: Create/Update Comment
      uses: actions/github-script@v6
      env:
        TF_WORKSPACE: "${{ steps.workspace.outputs.stdout }}"
        CUSTOM_TITLE: "${{ inputs.pr-comment-title }}"
      with:
        script: |
          if (!context || !context.issue || !context.issue.number) {
            return;
          }

          const tag = [
            process.env.CUSTOM_TITLE,
            process.env.TF_WORKSPACE,
          ]
            .filter(s => !!s)
            .join(" ");

          const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
          const run_link = '<a href="' + run_url + '">Actions</a>.'
          const fs = require('fs')
          const raw_plan = fs.readFileSync('plan.out', 'utf8')
          const plan = raw_plan.length > 65000 ? " ..." + raw_plan.toString().substring(raw_plan.length - 65000, raw_plan.length) : raw_plan
          const truncated_message = raw_plan.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""

          const commentTitle = `### Terraform Status ${tag}`;
          const commentContent = `
          ${commentTitle}
          #### Terraform Format and Style ðŸ–Œ \`${{ steps.fmt.outputs.fmt-outcome }}\`
          #### Terraform Validate ðŸ“– \`${{ steps.validate.outputs.validate-outcome }}\`
          #### Terraform Plan ðŸ“– \`${{ steps.plan.outputs.plan-outcome }}\`
          <details>
          <summary>Show Plan</summary>

          \`\`\`
          ${plan}
          \`\`\`

          </details>
          ${truncated_message}

          Pusher: @${{ github.actor }}
          Action: \`${{ github.event_name }}\`
          `;

          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          const githubActionsBotComment = comments.data.find(comment =>
            comment.user.login === 'github-actions[bot]' &&
             comment.body.includes(commentTitle)
          );

          if (raw_plan.includes("No changes.")) {
            if (githubActionsBotComment) {
              await github.rest.issues.deleteComment({
                comment_id: githubActionsBotComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
              })
            }
          } else {
            if (githubActionsBotComment) {
              await github.rest.issues.updateComment({
                comment_id: githubActionsBotComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentContent,
              })
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentContent,
              })
            }
          }
